package fire_db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import fire_db.ZoneInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZONE_INFO".
*/
public class ZoneInfoDao extends AbstractDao<ZoneInfo, Long> {

    public static final String TABLENAME = "ZONE_INFO";

    /**
     * Properties of entity ZoneInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Zone_step = new Property(0, long.class, "zone_step", true, "ZONE_STEP");
        public final static Property Grid_x = new Property(1, int.class, "grid_x", false, "GRID_X");
        public final static Property Grid_y = new Property(2, int.class, "grid_y", false, "GRID_Y");
        public final static Property Grid_z = new Property(3, int.class, "grid_z", false, "GRID_Z");
        public final static Property Zone_step_type = new Property(4, int.class, "zone_step_type", false, "ZONE_STEP_TYPE");
    };


    public ZoneInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ZoneInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ZONE_INFO\" (" + //
                "\"ZONE_STEP\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ," + // 0: zone_step
                "\"GRID_X\" INTEGER NOT NULL ," + // 1: grid_x
                "\"GRID_Y\" INTEGER NOT NULL ," + // 2: grid_y
                "\"GRID_Z\" INTEGER NOT NULL ," + // 3: grid_z
                "\"ZONE_STEP_TYPE\" INTEGER NOT NULL );"); // 4: zone_step_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZONE_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ZoneInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getZone_step());
        stmt.bindLong(2, entity.getGrid_x());
        stmt.bindLong(3, entity.getGrid_y());
        stmt.bindLong(4, entity.getGrid_z());
        stmt.bindLong(5, entity.getZone_step_type());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ZoneInfo readEntity(Cursor cursor, int offset) {
        ZoneInfo entity = new ZoneInfo( //
            cursor.getLong(offset + 0), // zone_step
            cursor.getInt(offset + 1), // grid_x
            cursor.getInt(offset + 2), // grid_y
            cursor.getInt(offset + 3), // grid_z
            cursor.getInt(offset + 4) // zone_step_type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ZoneInfo entity, int offset) {
        entity.setZone_step(cursor.getLong(offset + 0));
        entity.setGrid_x(cursor.getInt(offset + 1));
        entity.setGrid_y(cursor.getInt(offset + 2));
        entity.setGrid_z(cursor.getInt(offset + 3));
        entity.setZone_step_type(cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ZoneInfo entity, long rowId) {
        entity.setZone_step(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ZoneInfo entity) {
        if(entity != null) {
            return entity.getZone_step();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
